쿼리문의 실행 순서
4번 : SELECT절
1번 : FROM절		- JOIN
2번 : WHERE절
3번 : GROUP BY절
5번 : ORDER BY절


조인(JOIN) : 한개 이상의 릴레이션을 논리적으로 합치는 것
> Full Join : 튜플x튜플, 릴레이션 간 존재하는 모든 튜플을 조인
> Inner Join : 릴레이션 간 조건에 맞는 튜플을 조인
	동등이너조인(=, ==)과 비동등이너조인(!=)
> Outer Join : Inner Join + Join에 참여하지 않은 튜플을 출력한다.
	조인 위치에 따라 Left Outer Join, Right Outer Join

▶ 뷰(VIEW)를 들어가기 앞서..
테이블은 데이터 중복을 최소화하기 위해 정규화 되어야하고, 정규화는 테이블을 분리하는 의미가 있다.
그런데, 서비스를 이용하는 고객 입장에서는 2개 이상의 테이블이 조인이 되어야하는 경우가 존재한다.
위의 경우들은 생각하면 정규화는 설계자의 입장이고, 조인은 서비스를 제공하는 입장의 기술인데..
2개 이상의 테이블이 조인되어야하는 서비스는 서비스가 이용될 때마다 DB는 조인 연산을 계속해야하기 때문에 쿼리가 복잡해진다.
이러한 현상을 방지하여 간단하게 할 방법은 없을까?
해결책은 물리적인 테이블은 유지하되, 조인 결과를 합친 논리적인 테이블을 만드는 것이다.
논리적인 테이블은 물리적인 테이블의 데이터로 만들어져 있다.
이런 논리적인 테이블을 뷰라고 한다.

생성시킨 VIEW의 이름으로 조회가 가능하다.
생성시킨 VIEW의 컬럼명으로도 조회가 가능하다.

뷰를 통해서 INSERT UPDATE DELETE가 이론적으로는 가능하지만 테이블의 무결성을 위배되지 않아야한다.
이런 점을 통해 뷰는 조회 목적으로 많이 사용한다.
